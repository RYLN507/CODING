from pyglet.window import Window
from pyglet.app import run
from pyglet.shapes import Circle, Rectangle
from pyglet.graphics import Batch
from pyglet import clock
import math

def hex_to_rgb(hex_color):
    return int(hex_color[1:3], 16), int(hex_color[3:5], 16), int(hex_color[5:7], 16), 255

def merge_sort(arr):
    if len(arr) > 1:
        mid = len(arr) // 2
        left = arr[:mid]
        right = arr[mid:]

        merge_sort(left)
        merge_sort(right)

        i = j = k = 0
        while i < len(left) and j < len(right):
            if left[i] < right[j]:
                arr[k] = left[i]
                i += 1
            else:
                arr[k] = right[j]
                j += 1
            k += 1

        while i < len(left):
            arr[k] = left[i]
            i += 1
            k += 1

        while j < len(right):
            arr[k] = right[j]
            j += 1
            k += 1

class Renderer(Window):
    def __init__(self):
        super().__init__(640, 640, "Solar System Simulation")
        self.batch = Batch()
        self.x = [3, 4, 2, 1, 5]
        self.bars = []
        self.pastel_colors = ["#F0F8FF", "#FAEBD7", "#FFE4E1", "#E0FFFF", "#90EE90"]

        for e, i in enumerate(self.x):
            self.bars.append(Rectangle(100 + e * 100, 100, 80, i * 100, color=hex_to_rgb(self.pastel_colors[e]), batch=self.batch))

    def on_update(self, deltatime):
        merge_sort(self.x)  

        self.bars = []
        for e, i in enumerate(self.x):
            self.bars.append(Rectangle(100 + e * 100, 100, 80, i * 100, color=hex_to_rgb(self.pastel_colors[e]), batch=self.batch))

    def on_draw(self):
        self.clear()
        self.batch.draw()

renderer = Renderer()
clock.schedule_interval(renderer.on_update, 3)
run()
